{"version":3,"file":"definitions.js","sourceRoot":"","sources":["../../src/definitions.ts"],"names":[],"mappings":"AASA,MAAM,CAAN,IAAY,WAKX;AALD,WAAY,WAAW;IACrB,mDAAO,CAAA;IACP,6CAAI,CAAA;IACJ,yCAAE,CAAA;IACF,iDAAM,CAAA;AACR,CAAC,EALW,WAAW,KAAX,WAAW,QAKtB;AAED,MAAM,CAAN,IAAY,UAwBX;AAxBD,WAAY,UAAU;IACpB,6DAAa,CAAA;IACb,6DAAa,CAAA;IACb,yDAAW,CAAA;IACX,2EAAoB,CAAA;IACpB,yFAA2B,CAAA;IAC3B,iDAAO,CAAA;IACP,qDAAS,CAAA;IACT,uDAAU,CAAA;IACV,uDAAU,CAAA;IACV,yEAAmB,CAAA;IACnB,4DAAY,CAAA;IACZ,kEAAe,CAAA;IACf,sDAAS,CAAA;IACT,oDAAQ,CAAA;IACR,sDAAS,CAAA;IACT,sEAAiB,CAAA;IACjB,kEAAe,CAAA;IACf,wEAAkB,CAAA;IAClB,0EAAmB,CAAA;IACnB,4DAAY,CAAA;IACZ,8DAAa,CAAA;IACb,4EAAoB,CAAA;IACpB,4EAAoB,CAAA;AACtB,CAAC,EAxBW,UAAU,KAAV,UAAU,QAwBrB","sourcesContent":["import type { PermissionState, PluginListenerHandle } from '@capacitor/core';\r\n\r\nexport interface WebPermissionStatus {\r\n  accelerometer: PermissionState;\r\n  'ambient-light-sensor': PermissionState;\r\n  gyroscope: PermissionState;\r\n  magnetometer: PermissionState;\r\n}\r\n\r\nexport enum SensorDelay {\r\n  FASTEST, // Get sensor data as fast as possible\r\n  GAME, // Rate suitable for games\r\n  UI, // Rate suitable for user interface\r\n  NORMAL, // Default rate, suitable for screen orientation changes\r\n}\r\n\r\nexport enum SensorType {\r\n  AMBIENT_LIGHT,\r\n  ACCELEROMETER,\r\n  TEMPERATURE,\r\n  GAME_ROTATION_VECTOR,\r\n  GEOMAGNETIC_ROTATION_VECTOR,\r\n  GRAVITY,\r\n  GYROSCOPE,\r\n  HEART_BEAT,\r\n  HEART_RATE,\r\n  LINEAR_ACCELERATION,\r\n  MAGNETOMETER,\r\n  MOTION_DETECTOR,\r\n  POSE_6DOF,\r\n  PRESSURE,\r\n  PROXIMITY,\r\n  RELATIVE_HUMIDITY,\r\n  ROTATION_VECTOR,\r\n  SIGNIFICANT_MOTION,\r\n  STATIONARY_DETECTOR,\r\n  STEP_COUNTER,\r\n  STEP_DETECTOR,\r\n  ABSOLUTE_ORIENTATION,\r\n  RELATIVE_ORIENTATION,\r\n}\r\n\r\nexport type SensorEvent = keyof typeof SensorType;\r\n\r\nexport interface SensorOptions {\r\n  type: SensorType;\r\n  delay?: SensorDelay;\r\n}\r\n\r\nexport interface SensorInfos {\r\n  vendor: string;\r\n  version: number;\r\n  type: number;\r\n  maxRange: number;\r\n  resolution: number;\r\n  power: number;\r\n  minDelay: number;\r\n  maxDelay: number;\r\n}\r\n\r\nexport interface SensorData extends SensorOptions {\r\n  infos?: SensorInfos;\r\n}\r\n\r\nexport interface SensorResult {\r\n  accuracy?: number;\r\n  timestamp?: number;\r\n  values: number[];\r\n}\r\n\r\nexport interface SensorsPlugin {\r\n  init(options: SensorOptions): Promise<SensorData | undefined>;\r\n  getAvailableSensors(): Promise<{\r\n    sensors: SensorType[];\r\n  }>;\r\n  requestPermissions(sensor: SensorData): Promise<WebPermissionStatus>;\r\n  start(sensor: SensorData): Promise<void>;\r\n  stop(sensor: SensorData): Promise<void>;\r\n  addListener(\r\n    eventName: SensorEvent,\r\n    listenerFunc: (event: SensorResult) => void,\r\n  ): Promise<PluginListenerHandle>;\r\n  removeAllListeners(): Promise<void>;\r\n}\r\n"]}